{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Monokle Welcome to Monokle - your friendly desktop UI for managing k8s manifests! Monokle helps you - Quickly get a high-level view of your manifests, their contained resources and relationships - Easily edit resources without having to learn or look up yaml syntax - Refactor resources with maintained integrity of names and references - Preview and debug resources generated with kustomize or Helm - Diff resources against your cluster and apply changes immediately - Visualize and navigate resources in your clusters - And much more! Check out the Features Document or watch the Monokle 1.0 walkthrough video below","title":"Welcome"},{"location":"#monokle","text":"Welcome to Monokle - your friendly desktop UI for managing k8s manifests! Monokle helps you - Quickly get a high-level view of your manifests, their contained resources and relationships - Easily edit resources without having to learn or look up yaml syntax - Refactor resources with maintained integrity of names and references - Preview and debug resources generated with kustomize or Helm - Diff resources against your cluster and apply changes immediately - Visualize and navigate resources in your clusters - And much more! Check out the Features Document or watch the Monokle 1.0 walkthrough video below","title":"Monokle"},{"location":"apply-and-diff/","text":"Applying and Diffing Resources At any time when a resource is selected in the navigator the Editor contains \"Apply\" and \"Diff\" buttons in the top right. Selecting \"Apply\" will prompt if to apply the selected resource to the currently configured Cluster. A status message will be shown in the top right after applying. Selecting \"Diff\" will diff the selected resource against the currently configured cluster; if the resource does not exist in the cluster an error will be shown if the resource does exist a Diff dialog will be shown: In this screenshot the left shows the resource in Monokle the right shows the resource retrieved from the cluster differences are highlighted as shown in the screenshot Refreshing the diff is done with the \"Refresh\" button, applying your local version of the resource to your cluster is done with \"Apply\" (!).","title":"Apply/Diff"},{"location":"apply-and-diff/#applying-and-diffing-resources","text":"At any time when a resource is selected in the navigator the Editor contains \"Apply\" and \"Diff\" buttons in the top right. Selecting \"Apply\" will prompt if to apply the selected resource to the currently configured Cluster. A status message will be shown in the top right after applying. Selecting \"Diff\" will diff the selected resource against the currently configured cluster; if the resource does not exist in the cluster an error will be shown if the resource does exist a Diff dialog will be shown: In this screenshot the left shows the resource in Monokle the right shows the resource retrieved from the cluster differences are highlighted as shown in the screenshot Refreshing the diff is done with the \"Refresh\" button, applying your local version of the resource to your cluster is done with \"Apply\" (!).","title":"Applying and Diffing Resources"},{"location":"architecture/","text":"Monokle Architecture Monokle is a \"straight-forward\" React/typescript application using Redux Toolkit for state-mgmt. Visuals are done with antd design and a bunch of fairly common libraries/frameworks are used internally for common functionality (see components below). This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder, which provides TypeScript supports for Electron main process source code Hot-relaod support for Electron app Electron Builder support See https://www.electron.build/ for more info on electron builder Folder structure /electron : electron main thread, contains startup code and some ipc handlers invoked from the UI /src : root for monokle UI application, contains App.tsx, Index.tsx, etc. /components : UI components - coarse to fine grained; organisms -> molecules -> atoms /constants : constants.. /models : type definitions for core objects (see below) and states /redux : redux-related code (selectors, hooks, store, reducers, thunks, services) /styles : styles.. /utils : common utility functions /assets : icons/images/etc Core objects Most logic revolves around K8sResource objects which \"encapsulate\" all data associated with a parsed resource. FileEntry objects correspond to a parsed file - which can contain 0..n K8sResource objects The AppState holds the main state of the application (see inline comments), state changes are handled by the main reducer and corresponding thunks Main UI Components The content of most high level organisms and molecules should be fairly self-explanatory. A few highlights: the FileTreePane renders the selected folder the NavigatorPane renders the main resource navigator, including sections for Helm Charts and Kustomizations the Monaco component renders the source editor using the Monaco editor (same as used by VS Code) the FormEditor component renders nice forms for K8sResources using the react-jsonschema-form component (see below), corresponding schames/uiSchemas are in the resources/form-schemas folder. 3rd party components used https://github.com/eemeli/yaml for yaml parsing https://github.com/react-monaco-editor/react-monaco-editor for source editing https://github.com/micromatch/micromatch for dynamic filtering in navigator and file exclusion matching https://github.com/JSONPath-Plus/JSONPath for finding refs/selectors in resources https://github.com/rjsf-team/react-jsonschema-form for generating forms for k8s resources https://github.com/wbkd/react-flow for graph diagrams https://github.com/tweenjs/es6-tween for animation tweening https://github.com/pengx17/monaco-yaml for yaml support in the source editor https://github.com/paulmillr/chokidar for file watching https://github.com/ant-design/ant-design/ for UI https://github.com/styled-components/styled-components for custom styling Dev Dependencies https://github.com/gsoft-inc/craco for overriding CRA config for folder aliases, see https://www.npmjs.com/package/craco-alias#examples K8s Schemas Monokle currently uses the latest 1.22.1 schemas for validation and editor functionality - see this issue for making schema version configurable. Schemas are currently taken from https://github.com/yannh/kubernetes-json-schema - strict version is used.","title":"Architecture"},{"location":"architecture/#monokle-architecture","text":"Monokle is a \"straight-forward\" React/typescript application using Redux Toolkit for state-mgmt. Visuals are done with antd design and a bunch of fairly common libraries/frameworks are used internally for common functionality (see components below). This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder, which provides TypeScript supports for Electron main process source code Hot-relaod support for Electron app Electron Builder support See https://www.electron.build/ for more info on electron builder","title":"Monokle Architecture"},{"location":"architecture/#folder-structure","text":"/electron : electron main thread, contains startup code and some ipc handlers invoked from the UI /src : root for monokle UI application, contains App.tsx, Index.tsx, etc. /components : UI components - coarse to fine grained; organisms -> molecules -> atoms /constants : constants.. /models : type definitions for core objects (see below) and states /redux : redux-related code (selectors, hooks, store, reducers, thunks, services) /styles : styles.. /utils : common utility functions /assets : icons/images/etc","title":"Folder structure"},{"location":"architecture/#core-objects","text":"Most logic revolves around K8sResource objects which \"encapsulate\" all data associated with a parsed resource. FileEntry objects correspond to a parsed file - which can contain 0..n K8sResource objects The AppState holds the main state of the application (see inline comments), state changes are handled by the main reducer and corresponding thunks","title":"Core objects"},{"location":"architecture/#main-ui-components","text":"The content of most high level organisms and molecules should be fairly self-explanatory. A few highlights: the FileTreePane renders the selected folder the NavigatorPane renders the main resource navigator, including sections for Helm Charts and Kustomizations the Monaco component renders the source editor using the Monaco editor (same as used by VS Code) the FormEditor component renders nice forms for K8sResources using the react-jsonschema-form component (see below), corresponding schames/uiSchemas are in the resources/form-schemas folder.","title":"Main UI Components"},{"location":"architecture/#3rd-party-components-used","text":"https://github.com/eemeli/yaml for yaml parsing https://github.com/react-monaco-editor/react-monaco-editor for source editing https://github.com/micromatch/micromatch for dynamic filtering in navigator and file exclusion matching https://github.com/JSONPath-Plus/JSONPath for finding refs/selectors in resources https://github.com/rjsf-team/react-jsonschema-form for generating forms for k8s resources https://github.com/wbkd/react-flow for graph diagrams https://github.com/tweenjs/es6-tween for animation tweening https://github.com/pengx17/monaco-yaml for yaml support in the source editor https://github.com/paulmillr/chokidar for file watching https://github.com/ant-design/ant-design/ for UI https://github.com/styled-components/styled-components for custom styling","title":"3rd party components used"},{"location":"architecture/#dev-dependencies","text":"https://github.com/gsoft-inc/craco for overriding CRA config for folder aliases, see https://www.npmjs.com/package/craco-alias#examples","title":"Dev Dependencies"},{"location":"architecture/#k8s-schemas","text":"Monokle currently uses the latest 1.22.1 schemas for validation and editor functionality - see this issue for making schema version configurable. Schemas are currently taken from https://github.com/yannh/kubernetes-json-schema - strict version is used.","title":"K8s Schemas"},{"location":"cluster-integration/","text":"Cluster Integration Although Monokle is mainly geared at working with manifest files, it also has the possibility to connect to a cluster and show all contained resources, providing a convenient and easy way to inspect cluster resources. Selecting the \"Cluster Preview\" button in the left toolbar replaces the File Explorer with a Clusters tab: The kubeconfig field sets which kubeconfig to use for cluster interactions (this is the same as in the global settings) Selecting the \"Show Cluster Objects\" button will attempt to populate the Resource Navigator with objects from the configured cluster: Monokle is now in \"Cluster Mode\" (as indicated by the header at the top): the File Explorer has been disabled if a folder had been previously selected the Navigator contains all resources retrieved from the configured cluster: resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Exit\" in the top right restores the contents of the Resource Navigator to the currently selected folder (if any) (You can also exit Cluster Mode by selecting the File Explorer in the left toolbar and selecting a new folder with the \"Browse\" button)","title":"Cluster Integration"},{"location":"cluster-integration/#cluster-integration","text":"Although Monokle is mainly geared at working with manifest files, it also has the possibility to connect to a cluster and show all contained resources, providing a convenient and easy way to inspect cluster resources. Selecting the \"Cluster Preview\" button in the left toolbar replaces the File Explorer with a Clusters tab: The kubeconfig field sets which kubeconfig to use for cluster interactions (this is the same as in the global settings) Selecting the \"Show Cluster Objects\" button will attempt to populate the Resource Navigator with objects from the configured cluster: Monokle is now in \"Cluster Mode\" (as indicated by the header at the top): the File Explorer has been disabled if a folder had been previously selected the Navigator contains all resources retrieved from the configured cluster: resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Exit\" in the top right restores the contents of the Resource Navigator to the currently selected folder (if any) (You can also exit Cluster Mode by selecting the File Explorer in the left toolbar and selecting a new folder with the \"Browse\" button)","title":"Cluster Integration"},{"location":"features/","text":"Feature Overview Here is a short list of some of the features currently in Monokle. A big thanks to the excellent Argo-Rollouts project on GitHub for providing plentiful manifests for us to run Monokle against. Navigate k8s objects easily Monokle compiles a list of all the objects in your repo (from files you didnt want ignored), to give you a handy overview of all your resources - read more Follow links up- or downstream through your manifests Surf up- or downstream through your resources! Monokle highlights other resources, that your selection has direct relations to and even provides you with the links to go to them quickly - read more Preview the resources created by kustomize and Helm Do a quick dry-run, enabling you to navigate and debug the resources created by Kustomize or Helm. Apply them to the cluster if you are satisfied - read more about Kustomize and Helm Locate source file quickly, and see if links are dead-ends When you select a resource, Monokle will show you which file it was defined in. Also, if you mistype a referenced resource, Monokle will quickly show you, that you have a dead link with a warning triangle. Browse your clusters objects Want to browse your cluster instead of a repo? Simply smash the \"Show Cluster Objects\" button to import all objects from the cluster into Monokle - read more","title":"Features"},{"location":"features/#feature-overview","text":"Here is a short list of some of the features currently in Monokle. A big thanks to the excellent Argo-Rollouts project on GitHub for providing plentiful manifests for us to run Monokle against.","title":"Feature Overview"},{"location":"features/#navigate-k8s-objects-easily","text":"Monokle compiles a list of all the objects in your repo (from files you didnt want ignored), to give you a handy overview of all your resources - read more","title":"Navigate k8s objects easily"},{"location":"features/#follow-links-up-or-downstream-through-your-manifests","text":"Surf up- or downstream through your resources! Monokle highlights other resources, that your selection has direct relations to and even provides you with the links to go to them quickly - read more","title":"Follow links up- or downstream through your manifests"},{"location":"features/#preview-the-resources-created-by-kustomize-and-helm","text":"Do a quick dry-run, enabling you to navigate and debug the resources created by Kustomize or Helm. Apply them to the cluster if you are satisfied - read more about Kustomize and Helm","title":"Preview the resources created by kustomize and Helm"},{"location":"features/#locate-source-file-quickly-and-see-if-links-are-dead-ends","text":"When you select a resource, Monokle will show you which file it was defined in. Also, if you mistype a referenced resource, Monokle will quickly show you, that you have a dead link with a warning triangle.","title":"Locate source file quickly, and see if links are dead-ends"},{"location":"features/#browse-your-clusters-objects","text":"Want to browse your cluster instead of a repo? Simply smash the \"Show Cluster Objects\" button to import all objects from the cluster into Monokle - read more","title":"Browse your clusters objects"},{"location":"getting-started/","text":"Getting Started with Monokle Monokle is a standalone desktop application, you can either download an (as of yet unsigned) installer from releases or clone our repo and run as described below! Note: If you download the unsigned binary, your OS might complain - here's how to fix it on MacOS - Go to Preferences > Security & Privacy > General. - Text will appear saying: Monokle was blocked from use because it is not from an identified developer. - Click the Open Anyway button. A new pop-up will say: macOs cannot verify the developer of Monokle.Are you sure you want to open it? , - Simply click Move to Bin . No wait, did you? You should have clicked Open , silly. Alternatively - check out this document from Apple Support Running from source Mac Clone this repo and build with nvm install npm install --force run with npm run electron:dev Windows Clone this repo, make sure you are running the node version specified in .npmrc , then run: npm install --force run with npm run electron:dev The Electron app will reload if you make edits in the electron directory. You will also see any lint errors in the console. Please report any issues you have!","title":"Getting Started"},{"location":"getting-started/#getting-started-with-monokle","text":"Monokle is a standalone desktop application, you can either download an (as of yet unsigned) installer from releases or clone our repo and run as described below! Note: If you download the unsigned binary, your OS might complain - here's how to fix it on MacOS - Go to Preferences > Security & Privacy > General. - Text will appear saying: Monokle was blocked from use because it is not from an identified developer. - Click the Open Anyway button. A new pop-up will say: macOs cannot verify the developer of Monokle.Are you sure you want to open it? , - Simply click Move to Bin . No wait, did you? You should have clicked Open , silly. Alternatively - check out this document from Apple Support","title":"Getting Started with Monokle"},{"location":"getting-started/#running-from-source","text":"","title":"Running from source"},{"location":"getting-started/#mac","text":"Clone this repo and build with nvm install npm install --force run with npm run electron:dev","title":"Mac"},{"location":"getting-started/#windows","text":"Clone this repo, make sure you are running the node version specified in .npmrc , then run: npm install --force run with npm run electron:dev The Electron app will reload if you make edits in the electron directory. You will also see any lint errors in the console. Please report any issues you have!","title":"Windows"},{"location":"helm/","text":"Working with Helm Monokle has built-in support for Helm - a popular tool for managing kubernetes configurations: Monokle can identify and show Helm charts and their values files Monokle can preview resources generated by Helm, helping you debug your charts before you deploy them to your cluster (requires Helm to be installed and configured in your PATH) (all examples below are from the Emissary Ingress charts folder - clone and try these yourself!) Helm Navigation When selecting a folder containing Helm charts (identified by Chart.yaml files), these will automatically be displayed in a \"Helm Charts\" section on top of the Navigator: In the screenshot: the Helm Charts section shows the \"emissary-ingress\" Helm chart and the contained values files (only one in this example) the single values.yaml file has been selected the corresponding values.yaml file has been highlighted to the left the content of the file is shown in the Source editor to the right The Navigator at this point shows any K8s resources that Monokle finds in the selected folder Helm Preview The Helm Preview functionality helps you understand what resources would be installed in your cluster when running Helm with a specific values file. Hovering over a values file reveals a \"Preview\" action to the right: Selecting this action will run Helm on the selected file with either the install or template option (as configured in the global settings) and replace the contents of the Navigator with the generated resources. For example previewing the values file above will result in the following: Monokle is now in \"Preview Mode\" (as indicated by the header at the top): the File Explorer has been disabled the Navigator now contains all resources generated by running Helm with the selected values file resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Preview\" for a different values file will preview the output of Helm for that file instead selecting \"Exit\" in the top right or next to the values file restores the previous resource navigator.","title":"Working with Helm Charts"},{"location":"helm/#working-with-helm","text":"Monokle has built-in support for Helm - a popular tool for managing kubernetes configurations: Monokle can identify and show Helm charts and their values files Monokle can preview resources generated by Helm, helping you debug your charts before you deploy them to your cluster (requires Helm to be installed and configured in your PATH) (all examples below are from the Emissary Ingress charts folder - clone and try these yourself!)","title":"Working with Helm"},{"location":"helm/#helm-navigation","text":"When selecting a folder containing Helm charts (identified by Chart.yaml files), these will automatically be displayed in a \"Helm Charts\" section on top of the Navigator: In the screenshot: the Helm Charts section shows the \"emissary-ingress\" Helm chart and the contained values files (only one in this example) the single values.yaml file has been selected the corresponding values.yaml file has been highlighted to the left the content of the file is shown in the Source editor to the right The Navigator at this point shows any K8s resources that Monokle finds in the selected folder","title":"Helm Navigation"},{"location":"helm/#helm-preview","text":"The Helm Preview functionality helps you understand what resources would be installed in your cluster when running Helm with a specific values file. Hovering over a values file reveals a \"Preview\" action to the right: Selecting this action will run Helm on the selected file with either the install or template option (as configured in the global settings) and replace the contents of the Navigator with the generated resources. For example previewing the values file above will result in the following: Monokle is now in \"Preview Mode\" (as indicated by the header at the top): the File Explorer has been disabled the Navigator now contains all resources generated by running Helm with the selected values file resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Preview\" for a different values file will preview the output of Helm for that file instead selecting \"Exit\" in the top right or next to the values file restores the previous resource navigator.","title":"Helm Preview"},{"location":"kustomize/","text":"Working with Kustomize Monokle has built-in support for Kustomize - a popular tool for managing kubernetes configurations: Monokle can visualize dependencies and relationships between kustomize files to help you understand the scope of a specific kustomization Monokle can preview resources generated by Kustomize, helping you debug your configurations before you deploy them to your cluster (requires kubectl to be installed and configured in your PATH) (all examples below are from the Argo Rollouts manifest folder - clone and try these yourself!) Kustomize Navigation When selecting a folder containing kustomization.yaml files, these will automatically be displayed in a \"Kustomizations\" section on top of the Navigator: In the screenshot: the Kustomizations section shows all kustomization.yaml files - named after the folder they are in relative to the selected root folder the \"base\" kustomization.yaml has been selected the corresponding kustomization.yaml file has been highlighted to the left all \"downstream\" kustomizations and included resources are highlighted in the Navigator, helping you understand the \"scope\" of the selected kustomization the content of the kustomzation resource is shown in the Source editor to the right, with corresponding resource links marked in the code Just as with K8s resources, hovering over the link-icon to the right of the kustomization name shows its outgoing links: (here we can see the 7 resources included by the selected kustomization) and hovering the link-icon to the left of the kustomization name shows its incoming links: (here we see two \"upstream\" kustomizations that include the selected kustomization in their configuration) Kustomize Preview While the above helps you understand the relationships and dependencies between kustomizations and their included resources, the Preview functionality helps you understand what resources would be installed in your cluster when running kustomize. Hovering over a kustomization reveals a \"Preview\" action to the right: Selecting this action will run kustomize on the selected file with the \"-k\" option and replace the contents of the Navigator with the generated resources. For example previewing the \"base\" kustomization above will result in the following: Monokle is now in \"Preview Mode\" (as indicated by the header at the top): the File Explorer has been disabled the Navigator now contains all resources generated by running Kustomize with the \"base\" kustomization: resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Preview\" for a different kustomization will preview the output of kustomize for that resource instead selecting \"Exit\" in the top right or next to the kustomization restores the previous resource navigator. In the screenshot we can see that the selected kustomization resulted in 7 resources - and that they contain references to the image specified in the kustomization configuration:","title":"Working with Kustomize"},{"location":"kustomize/#working-with-kustomize","text":"Monokle has built-in support for Kustomize - a popular tool for managing kubernetes configurations: Monokle can visualize dependencies and relationships between kustomize files to help you understand the scope of a specific kustomization Monokle can preview resources generated by Kustomize, helping you debug your configurations before you deploy them to your cluster (requires kubectl to be installed and configured in your PATH) (all examples below are from the Argo Rollouts manifest folder - clone and try these yourself!)","title":"Working with Kustomize"},{"location":"kustomize/#kustomize-navigation","text":"When selecting a folder containing kustomization.yaml files, these will automatically be displayed in a \"Kustomizations\" section on top of the Navigator: In the screenshot: the Kustomizations section shows all kustomization.yaml files - named after the folder they are in relative to the selected root folder the \"base\" kustomization.yaml has been selected the corresponding kustomization.yaml file has been highlighted to the left all \"downstream\" kustomizations and included resources are highlighted in the Navigator, helping you understand the \"scope\" of the selected kustomization the content of the kustomzation resource is shown in the Source editor to the right, with corresponding resource links marked in the code Just as with K8s resources, hovering over the link-icon to the right of the kustomization name shows its outgoing links: (here we can see the 7 resources included by the selected kustomization) and hovering the link-icon to the left of the kustomization name shows its incoming links: (here we see two \"upstream\" kustomizations that include the selected kustomization in their configuration)","title":"Kustomize Navigation"},{"location":"kustomize/#kustomize-preview","text":"While the above helps you understand the relationships and dependencies between kustomizations and their included resources, the Preview functionality helps you understand what resources would be installed in your cluster when running kustomize. Hovering over a kustomization reveals a \"Preview\" action to the right: Selecting this action will run kustomize on the selected file with the \"-k\" option and replace the contents of the Navigator with the generated resources. For example previewing the \"base\" kustomization above will result in the following: Monokle is now in \"Preview Mode\" (as indicated by the header at the top): the File Explorer has been disabled the Navigator now contains all resources generated by running Kustomize with the \"base\" kustomization: resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Preview\" for a different kustomization will preview the output of kustomize for that resource instead selecting \"Exit\" in the top right or next to the kustomization restores the previous resource navigator. In the screenshot we can see that the selected kustomization resulted in 7 resources - and that they contain references to the image specified in the kustomization configuration:","title":"Kustomize Preview"},{"location":"overview/","text":"UI Overview Monokle is layed out like many other desktop applications: Left to right: The vertical toolbar to the far left allows you to switch between File and Cluster mode. The File Explorer (shown in screenshot) shows the contents of the currently selected folder. The Navigator in the center shows all resources found in the current folder or cluster. By default it shows all possible Resource sections and subsections - when selecting a folder or cluster only those sections that actually contain any resources will be shown. The Editor section to the right contains editors/views/actions for the currently selected resource or file The top right contains two buttons - Settings (see below) - GitHub -> opens the Monokle GitHub repo in your system browser. Settings Clicking the Settings icon on the top right opens the settings: Kubeconfig : sets which kubeconfig Monokle should use for all cluster interactions Files: Include : which files to parse for kubernetes resources when scanning folders Files: Exclude : which files/folders to exclude when scanning folders for resources Helm Preview Mode : which Helm command to use for generating previews (see Working with Helm Charts ) Template: uses Helm Template Install: uses Helm Install Keyboard Shortcuts Monokle current supports the following keyboard shortcuts: Cluster Preview: Ctrl/Cmd I Settings: Ctrl/Cmd P Exit Preview: ESC Browse Folder: Ctrl/Cmd O Refresh Folder: Ctrl/Cmd F5 Toggle Left Pane: Ctrl/Cmd B Toggle Right Pane: Ctrl/Cmd ALT B Save (in editors): Ctrl/Cmd S Navigate Back (Selection History): ALT ArrowLeft Navigate Forward (Selection History): ALT ArrowRight Open New Resource Wizard: Ctrl/Cmd N Apply Resource or File to cluster: Ctrl/Cmd ALT S Diff Resource: Ctrl/Cmd ALT D","title":"UI Overview"},{"location":"overview/#ui-overview","text":"Monokle is layed out like many other desktop applications: Left to right: The vertical toolbar to the far left allows you to switch between File and Cluster mode. The File Explorer (shown in screenshot) shows the contents of the currently selected folder. The Navigator in the center shows all resources found in the current folder or cluster. By default it shows all possible Resource sections and subsections - when selecting a folder or cluster only those sections that actually contain any resources will be shown. The Editor section to the right contains editors/views/actions for the currently selected resource or file The top right contains two buttons - Settings (see below) - GitHub -> opens the Monokle GitHub repo in your system browser.","title":"UI Overview"},{"location":"overview/#settings","text":"Clicking the Settings icon on the top right opens the settings: Kubeconfig : sets which kubeconfig Monokle should use for all cluster interactions Files: Include : which files to parse for kubernetes resources when scanning folders Files: Exclude : which files/folders to exclude when scanning folders for resources Helm Preview Mode : which Helm command to use for generating previews (see Working with Helm Charts ) Template: uses Helm Template Install: uses Helm Install","title":"Settings"},{"location":"overview/#keyboard-shortcuts","text":"Monokle current supports the following keyboard shortcuts: Cluster Preview: Ctrl/Cmd I Settings: Ctrl/Cmd P Exit Preview: ESC Browse Folder: Ctrl/Cmd O Refresh Folder: Ctrl/Cmd F5 Toggle Left Pane: Ctrl/Cmd B Toggle Right Pane: Ctrl/Cmd ALT B Save (in editors): Ctrl/Cmd S Navigate Back (Selection History): ALT ArrowLeft Navigate Forward (Selection History): ALT ArrowRight Open New Resource Wizard: Ctrl/Cmd N Apply Resource or File to cluster: Ctrl/Cmd ALT S Diff Resource: Ctrl/Cmd ALT D","title":"Keyboard Shortcuts"},{"location":"resource-editing/","text":"Resource Editing Source Editor Selecting either a file or resource will show its contents in the source editor to the right. The editor will syntax-highlight for yaml only at this point. Right-clicking in the editor shows a list of available commands - and pressing F1 opens its command-palette: Editing Resources When editing resources (not files) the editor is schema-aware for all native Kubernetes resources, which provides auto-complete (Ctrl-Space) and context-sensitive hover documentation Resource Links Resource links are marked in the gutter and underlined in the editor, with corresponding hover/popup windows to show linked resources: Broken links are shown with yellow triangles as in the Navigator: Saving changes The [Save] button on top of the editor will be enabled if valid changes have been made - invalid yaml will not be savable. Saving a resource will update the containing file correspondingly and recalculate all affected ingoing/outging links for the resource. Editing Files When editing files directly by selecting them in the File Explorer the editor will at this point not show any links or provide context-sensitive editing functionality. Form Editor To start with Monokle only shows a Form Editor for ConfigMap resources: The editor provides form fields for key ConfigMap properties, allowing you to edit/discover all available properties without having to learn or lookup the corresponding yaml/resource documentation. Any changes made and saved (with the Save button on the top right) are written back to the underlying yaml.","title":"Resource Editing"},{"location":"resource-editing/#resource-editing","text":"","title":"Resource Editing"},{"location":"resource-editing/#source-editor","text":"Selecting either a file or resource will show its contents in the source editor to the right. The editor will syntax-highlight for yaml only at this point. Right-clicking in the editor shows a list of available commands - and pressing F1 opens its command-palette:","title":"Source Editor"},{"location":"resource-editing/#editing-resources","text":"When editing resources (not files) the editor is schema-aware for all native Kubernetes resources, which provides auto-complete (Ctrl-Space) and context-sensitive hover documentation","title":"Editing Resources"},{"location":"resource-editing/#resource-links","text":"Resource links are marked in the gutter and underlined in the editor, with corresponding hover/popup windows to show linked resources: Broken links are shown with yellow triangles as in the Navigator:","title":"Resource Links"},{"location":"resource-editing/#saving-changes","text":"The [Save] button on top of the editor will be enabled if valid changes have been made - invalid yaml will not be savable. Saving a resource will update the containing file correspondingly and recalculate all affected ingoing/outging links for the resource.","title":"Saving changes"},{"location":"resource-editing/#editing-files","text":"When editing files directly by selecting them in the File Explorer the editor will at this point not show any links or provide context-sensitive editing functionality.","title":"Editing Files"},{"location":"resource-editing/#form-editor","text":"To start with Monokle only shows a Form Editor for ConfigMap resources: The editor provides form fields for key ConfigMap properties, allowing you to edit/discover all available properties without having to learn or lookup the corresponding yaml/resource documentation. Any changes made and saved (with the Save button on the top right) are written back to the underlying yaml.","title":"Form Editor"},{"location":"resource-navigation/","text":"Resource Navigation Resources can be loaded either from the file system or a configured cluster. - Selecting the \"Browse\" button in the File Explorer prompts for a folder containing resource manifests - Selecting \"Show Cluster Objects\" in the Cluster Explorer loads available resources using the configured kubeconfig variable, see Cluster Preview for more details Once selecting a folder the File Explorer and Navigators will be populated accordingly. Monokle will attempt to synchronize automatically with any external file/folder changes made in the selected folder, but the Refresh button next to the Browse button allows for manual reloading of the folder if needed. File Explorer The File Explorer now shows all files parsed in the specified folder excluded files are greyed out files containing resource manifests have a number displayed after them, showing the number of resources found in that file Selecting a file will highlight contained resources in the Navigator and attempt to scroll them into view. The contents of the file will be shown in the source editor to the right - allowing for direct editing of the file. In this screenshot - the argo-rollouts-aggregate-roles.yaml file is selected - the \"3\" after the filename indicates it contains 3 kubernetes resources - the 3 ClusterRole resources in thie file are highlighed in the Navigator in the middle - the contents of the file are shown in the editor to the right Resource Navigator The Navigator shows all resources found recursively in the selected folder. Resources are grouped into sections/subsections based on their usage in Kubernetes. Selecting a resource automatically highlights both the file containing that resource and any other resourced linked to the selected one: In this screenshot - the argo-rollouts-metrics service is selected - the associated argo-rollouts-metrics-service.yaml file is highlighted to the left - the linked argo-rollouts Deployment (via the selector in the Service manifest) is highlighted - the Service manifest is shown in the editor to the right (with highlighting of the link to the Deployment on line 16) The Namespaces filter at the top of the K8S Resources section is populated with available/defined namespaces and allows you to only show objects in the selected namespace - for example when retrieving resources from your cluster: Resource Links Links between resources are indicated by link icons to the left and right each resource name: - Links to the left indicate there are incoming link to the resource, for example a ConfigMap might have an incoming link from a Deployment - Links to the right indicate there are outgoing links from the resource, for example a Service might have a selector that selects a Deployment Hovering over a link icon will show a popup with all links (either incoming or outgoing) allowing you to click on a link to take you to that resource in the navigator: Here the popup shows the outgoing link from the argo-rollouts-metrics Service to the `argo-rollouts Deployment (via the selector in the Service manifest) If a link is \"unfulfilled\", i.e. not referring to any object currently in the navigator it is marked with a warning triangle - making it easy to identify broken resource-links in your manifests: In this screenshot the argo-rollouts-role-binding RoleBinding contains a reference to an argo-rollouts-role Role, which doesn't exist in the current manifests. Supported Resource links Monokle currently finds and visualizes the following links between kubernetes resources - please let us know if we missed something or got it wrong! Resource Type Outgoing Link(s) identified Secret metadata.annotations.kubernetes.io/service-account.name => ServiceAccount metadata.name (optional) Service content.spec.selector => Deployment `spec.template.metadata.labels`` PodSpec in Deployment / Pod / DaemonSet / Job / StatefulSet / ReplicaSet / CronJob / ReplicationController ..configMapRef.name => ConfigMap metadata.name , ..configMapKeyRef.name => ConfigMap metadata.name , ..volumes[*].configMap.name => ConfigMap metadata.name , ..volumes[*].secret.secretMame => Secret metadata.name , ..secretKeyRef.name => Secret metadata.name , ..imagePullSecrets => Secret metadata.name , ..serviceAccountName => ServiceAccount metadata.name ServiceAccount ..secrets => Secret metadata.name PersistentVolume spec.claimRef.name => PersistentVolumeClaim metadata.name PersistentVolumeClaim spec.volumeName => PersistentVolume metadata.name Endpoints metadata.name => Service metadata.name ClusterRoleBinding roleRef.name => ClusterRole metadata.name RoleBinding roleRef.name => ClusterRoleBinding or Role metadata.name Ingress ..backend.service.name => Service metadata.name , ..resource.* => any object in same namespace","title":"Navigating Resources"},{"location":"resource-navigation/#resource-navigation","text":"Resources can be loaded either from the file system or a configured cluster. - Selecting the \"Browse\" button in the File Explorer prompts for a folder containing resource manifests - Selecting \"Show Cluster Objects\" in the Cluster Explorer loads available resources using the configured kubeconfig variable, see Cluster Preview for more details Once selecting a folder the File Explorer and Navigators will be populated accordingly. Monokle will attempt to synchronize automatically with any external file/folder changes made in the selected folder, but the Refresh button next to the Browse button allows for manual reloading of the folder if needed.","title":"Resource Navigation"},{"location":"resource-navigation/#file-explorer","text":"The File Explorer now shows all files parsed in the specified folder excluded files are greyed out files containing resource manifests have a number displayed after them, showing the number of resources found in that file Selecting a file will highlight contained resources in the Navigator and attempt to scroll them into view. The contents of the file will be shown in the source editor to the right - allowing for direct editing of the file. In this screenshot - the argo-rollouts-aggregate-roles.yaml file is selected - the \"3\" after the filename indicates it contains 3 kubernetes resources - the 3 ClusterRole resources in thie file are highlighed in the Navigator in the middle - the contents of the file are shown in the editor to the right","title":"File Explorer"},{"location":"resource-navigation/#resource-navigator","text":"The Navigator shows all resources found recursively in the selected folder. Resources are grouped into sections/subsections based on their usage in Kubernetes. Selecting a resource automatically highlights both the file containing that resource and any other resourced linked to the selected one: In this screenshot - the argo-rollouts-metrics service is selected - the associated argo-rollouts-metrics-service.yaml file is highlighted to the left - the linked argo-rollouts Deployment (via the selector in the Service manifest) is highlighted - the Service manifest is shown in the editor to the right (with highlighting of the link to the Deployment on line 16) The Namespaces filter at the top of the K8S Resources section is populated with available/defined namespaces and allows you to only show objects in the selected namespace - for example when retrieving resources from your cluster:","title":"Resource Navigator"},{"location":"resource-navigation/#resource-links","text":"Links between resources are indicated by link icons to the left and right each resource name: - Links to the left indicate there are incoming link to the resource, for example a ConfigMap might have an incoming link from a Deployment - Links to the right indicate there are outgoing links from the resource, for example a Service might have a selector that selects a Deployment Hovering over a link icon will show a popup with all links (either incoming or outgoing) allowing you to click on a link to take you to that resource in the navigator: Here the popup shows the outgoing link from the argo-rollouts-metrics Service to the `argo-rollouts Deployment (via the selector in the Service manifest) If a link is \"unfulfilled\", i.e. not referring to any object currently in the navigator it is marked with a warning triangle - making it easy to identify broken resource-links in your manifests: In this screenshot the argo-rollouts-role-binding RoleBinding contains a reference to an argo-rollouts-role Role, which doesn't exist in the current manifests.","title":"Resource Links"},{"location":"resource-navigation/#supported-resource-links","text":"Monokle currently finds and visualizes the following links between kubernetes resources - please let us know if we missed something or got it wrong! Resource Type Outgoing Link(s) identified Secret metadata.annotations.kubernetes.io/service-account.name => ServiceAccount metadata.name (optional) Service content.spec.selector => Deployment `spec.template.metadata.labels`` PodSpec in Deployment / Pod / DaemonSet / Job / StatefulSet / ReplicaSet / CronJob / ReplicationController ..configMapRef.name => ConfigMap metadata.name , ..configMapKeyRef.name => ConfigMap metadata.name , ..volumes[*].configMap.name => ConfigMap metadata.name , ..volumes[*].secret.secretMame => Secret metadata.name , ..secretKeyRef.name => Secret metadata.name , ..imagePullSecrets => Secret metadata.name , ..serviceAccountName => ServiceAccount metadata.name ServiceAccount ..secrets => Secret metadata.name PersistentVolume spec.claimRef.name => PersistentVolumeClaim metadata.name PersistentVolumeClaim spec.volumeName => PersistentVolume metadata.name Endpoints metadata.name => Service metadata.name ClusterRoleBinding roleRef.name => ClusterRole metadata.name RoleBinding roleRef.name => ClusterRoleBinding or Role metadata.name Ingress ..backend.service.name => Service metadata.name , ..resource.* => any object in same namespace","title":"Supported Resource links"}]}